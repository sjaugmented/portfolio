[
  {
    "name": "Vote-ify",
    "printIt": true,
    "imgUrl": "https://i.imgur.com/q1kmvua.png",
    "summary": "Playlists curated by the community, using the Spotify API.",
    "why": "Everyone loves sharing playlists (or almost everyone does). And everyone loves curated suggestions. We thought it would be cool to combine the two - allow a community to curate their own playlists. Instead of being told what's good, let democracy decide.",
    "challenge": "How to implement voting that couldn't easily be gamed. This was our first time working with React and components and figuring out how to log votes that would persist across component re-renders.",
    "how": "When a user suggests a song, it is sent into a queue where it has two weeks to earn enough votes to be officially added to the playlist. Users cannot vote for their own songs, they can vote for each song only once, and a combination of browser cookies, local storage, and database management record the user's votes, allowing them to persist across sessions.",
    "appLink": "https://vote-ify.herokuapp.com/",
    "repoLink": "https://github.com/sjaugmented/project3-api",
    "tech": {
      "spotify": true,
      "js": true,
      "html": true,
      "css": true,
      "ant": true,
      "node": true,
      "mongo": true,
      "react": true
    }
  },
  {
    "name": "Uno",
    "printIt": true,
    "imgUrl": "https://i.imgur.com/5tKEvOS.png",
    "summary": "A fun, browser-based card game.",
    "why": "My first ever solo JS project. I wanted to create something that was fun, simple yet stylish, and accurately modeled the rules of one of my favorite card games.",
    "challenge": "Making the CPU feel as human as possible, complete with delays for decision making and a varying strategy of when to play what cards.",
    "how": "First, harness the power of setTimeout() with a delay randomizer based off the size of the CPU's hand so it looks like it's considering its options. Then there's the \"vengeance factor\" -  the CPU keeps track of when the player plays face card vs a number card, remembering when the player hits it with a draw card, and responding in kind if it has draw cards of its own. It also plays more aggressively the smaller the player's hand is.",
    "appLink": "https://sjaugmented.github.io/Project1-Uno/",
    "repoLink": "https://github.com/sjaugmented/Project1-Uno",
    "tech": {
      "js": true,
      "html": true,
      "css": true
    }
  },
  {
    "name": "TravelBook",
    "printIt": true,
    "imgUrl": "https://i.imgur.com/JYdWeK1.png",
    "summary": "The ultimate travel companion (WIP).",
    "why": "As a frequent traveler, I've always wanted a fun, simple way to data-mine my trips. Something that could game-ify the experience a little. How many miles did I travel by car? By foot? By train? What's the percentage of cities in Italy or Greece that I've visited? How much of the Americas have I seen? TravelBook will log all of this, complete with photo albums and Achievements you can earn along the way.",
    "challenge": "Finding a reliable search radius for Google Places. There's no one-size-fits-all. For example, a search for \"airports\" around Los Angeles returns 10+ hits, but in Osaka, Japan you get nada. I wanted a way for the radius to grow intelligently.",
    "how": "Recursion to the rescue! I wrote a simple recursive function: if search results are less than X, double the search radius and search again.",
    "appLink": "",
    "repoLink": "https://github.com/sjaugmented/travel-book-client",
    "tech": {
      "appleMaps": true,
      "googlePlaces": true,
      "googleAuth": true,
      "js": true,
      "node": true,
      "express": true,
      "materialize": true,
      "mongo": true,
      "native": true,
      "ios": true
    }
  },
  {
    "name": "ZooKeeper",
    "printIt": false,
    "imgUrl": "https://i.imgur.com/dwfX6eV.png",
    "summary": "A simple CRUD website for pretend zookeepers to manage a pretend zoo.",
    "why": "A first foray into setting up a server and RESTful routes.",
    "challenge": "Setting up my first server with AtlasDB",
    "how": "My focus here was backend, setting up the server, getting the Atlas DB hooked up, defining routes and controllers, and making sure it all had reliable CRUD functionality. This was also my first time working with Passport and Google Auth. The functionality was a little challenging because of the way our models are connected. I was especially proud of the seed file and the animal generator I wrote for it - creating 200 animals is as easy as creating 20 or 2.",
    "appLink": "https://project-zoo-keeper.herokuapp.com",
    "repoLink": "https://github.com/sjaugmented/Project-ZooKeeper",
    "tech": {
      "js": true,
      "html": true,
      "css": true,
      "node": true,
      "mongo": true,
      "express": true
    }
  }
]
