[
  {
    "name": "TravelBook",
    "imgUrl": "https://i.imgur.com/JYdWeK1.png",
    "summary": "The ultimate travel companion (WIP).",
    "why": "As a frequent traveler, I've always wanted a fun, simple way to data-mine my trips. Something that could game-ify the experience a little. How many miles did I travel by car? By foot? By train? What's the percentage of cities in Italy or Greece that I've visited? How much of the Americas have I seen? TravelBook will log all of this, complete with photo albums and Achievements you can earn along the way.",
    "challenge": "Usability is key. It needs to be simple and straight-forward. It needs effortless location tracking, map management, the ability to easily select and add photos to trips. You could do all of this with a web app, but it's not exactly ideal. The foundation of this experience is that it needs to be simple and straightforward. You don't want users fumbling with permissions everytime they try to store a location, or waiting on upload/download speeds when they're in the remote regions of Bolivia.",
    "how": "The solution was to learn React Native. Suddenly all the core functionality - from location tracking to image management - became ten times easier to implement. Utiziling Apple Maps, Google API's, and recursive functionality, we have the beginnings of an app that feels simple, elegant, and fun to use. Keep an eye out for it on the App Store someday soon!",
    "appLink": "",
    "repoLink": "https://github.com/sjaugmented/travel-book-client",
    "tech": {
      "appleMaps": true,
      "googlePlaces": true,
      "googleAuth": true,
      "js": true,
      "node": true,
      "express": true,
      "materialize": true,
      "mongo": true,
      "native": true,
      "ios": true
    }
  },
  {
    "name": "Vote-ify",
    "imgUrl": "https://i.imgur.com/q1kmvua.png",
    "summary": "Playlists curated by a community.",
    "why": "",
    "challenge": "",
    "how": "Using the Spotify API, users can listen to and contribute songs to 12 playlists, all curated and managed by the community. When a user suggests a song, it is sent into a queue where it has two weeks to earn enough votes to be officially added to the playlist. Working with the Spotify API was a challenge. It might be straight-forward for programmers with more than 9 weeks experience, but we definitely had some hurdles to overcome - mainly working with access/refresh tokens and figuring out the best way to hit the query endpoints. In the end we were able to hit the MVP we set out to create, and are continuing to refine this and add more functionality.",
    "appLink": "https://vote-ify.herokuapp.com/",
    "repoLink": "https://github.com/sjaugmented/project3-api",
    "tech": {
      "spotify": true,
      "js": true,
      "html": true,
      "css": true,
      "ant": true,
      "node": true,
      "mongo": true,
      "react": true
    }
  },
  {
    "name": "Uno",
    "imgUrl": "https://i.imgur.com/5tKEvOS.png",
    "summary": "A fun, browser-based card game.",
    "why": "My first ever solo JS project. I wanted to create something that was fun, simple yet stylish, and accurately modeled the rules of one of my favorite card games.",
    "challenge": "The biggest challenge was making the CPU feel as human as possible, complete with delays for decision making and a varying strategy of when to play what cards.",
    "how": "The CPU has a \"vengeance factor,\" remembering if and when the player hit it with a draw card, and responding in kind if it has draw cards of its own.",
    "appLink": "https://sjaugmented.github.io/Project1-Uno/",
    "repoLink": "https://github.com/sjaugmented/Project1-Uno",
    "tech": {
      "js": true,
      "html": true,
      "css": true
    }
  },
  {
    "name": "ZooKeeper",
    "imgUrl": "https://i.imgur.com/dwfX6eV.png",
    "summary": "A simple management app for pretend zookeepers to manage a pretend zoo. It utilizes RESTful routes, CRUD, and two models to give users control over enclosures and the animals within them.",
    "why": "",
    "challenge": "",
    "how": "My focus here was backend, setting up the server, getting the Atlas DB hooked up, defining routes and controllers, and making sure it all had reliable CRUD functionality. This was also my first time working with Passport and Google Auth. The functionality was a little challenging because of the way our models are connected. I was especially proud of the seed file and the animal generator I wrote for it - creating 200 animals is as easy as creating 20 or 2.",
    "appLink": "https://project-zoo-keeper.herokuapp.com",
    "repoLink": "https://github.com/sjaugmented/Project-ZooKeeper",
    "tech": {
      "js": true,
      "html": true,
      "css": true,
      "node": true,
      "mongo": true,
      "express": true
    }
  }
]
